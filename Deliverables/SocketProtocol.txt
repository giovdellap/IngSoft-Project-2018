MESSAGE PROTOCOL FOR SOCKET CONNECTIONS

 4 SEPARATED MACRO-PHASES:

 1) INITIALIZATION 1
 2) INITIALIZATION 2
 3) ROUND
 4) END OF THE GAME

------------------------------------------

 Communication's String structure:

 #Cmd#$Arg$
 Cmd = command
 Arg = data
 Ex.:
 #privobj#$3$
 Private Objective with ID 3 is assigned to the player

------------------------------------------

 Glossary

 CMD:
  wait: server waiting for something to be done
  insert: server waiting for something to be sent from the client
          server expects a response with Server's Arg as Client's Cmd
  confirm: Server confirmation
  player: preceeds everyhing about other players
 ARG:


------------------------------------------

 Protocol Rules:

 The client confirms only in case of many messages in the round phase
 Every info about other players has to be preceeded by <player>$n$
 Everything sent to the server, needs a confirmation ack 

------------------------------------------

 INITIALIZATION 1

 From the beginning, to when ALL clients are initilized and ready to receive data


 S: #player#$n$
 S: #insert#$username$
 C: #username#$bob$
 S: #insert#$username$
 C: #username#$alan$
 S: #confirm#$username$
 S: #wait#$players$
 
 ---------------------------------------

 INITIALIZATION 2

 S: #privobj#$id$
 S: #scheme#$id1$
 S: #scheme#$id2$

 n times:
 S: #scoremarker#$index$
 S: #index#$id$

 3 times:
 S: #pubobj#$id$
 //here you don't need 2 communication phases because order is not relevant

 3 times:
 S: #tool#$id$
 
 
 S: #insert#$scheme$
 C: #scheme#$id$
 C: #fb#$1||2$

 S: #wait#$players$

 --------------------------------------

 INITIALIZATION 2: PHASE 2
 Everyone has chosen his schemecard

 S: #player#$id$
 S: #username#$name$
 S: #scheme#$id$
 S: #fb#$1||2$
 S: #favtokens#$tokens$
 
 -------------------------------------
 -------------------------------------
 
 
 MODEL COMPONENT'S PROTOCOL   
------------------------------
  
  DRAFTPOOL:
    
  SERVER:
  #model#$draft$
  
  For each die:
  
  #index#$n$
  #color#$n$
  #value#$n$
    
     
  #end#$draft$



  CLIENT:
  #model#$draft$
  #index#$i$
--------------------------

 SCHEMECARD

SERVER:
#model#$scheme$

For each die on the schemecard:
 #x#$n$
 #y#$m$
 #color#$c$
 #value#$v$
 
 #end#$scheme$
 
 CLIENT:
 
 MOVE:
 #x#$n$
 #y#$m$
 
 
 ---------------------
  
  
  ROUNDTRACK:
  
  SERVER:
  #model#$track$
  
  For each round:
  #round#$i$
  
  For each die in that roundDice:
  #die#$index$
  #color#$c$
  #value#$v$
 
  #end#$track$
  
 ----------------------
 TOOLCARD UPDATE
 (Server side)
 
 #model#$tool$
 For each ToolCard
 #id#$n$
 #tokens#$m$
 
 #end#$tool$
  
 ----------------------
 CLIENT MOVE PROTOCOL
 
 #client#$move$
 model component draftpool client protocol
 model component schemecard client protocol

 
 ---------------------
SERVER CHECK RESPONSE:

#toolcheck#$bool$

---------------------
TOOLCARD CLIENT PROTOCOL:
#tool#$id$
SERVER CHECK RESPONSE


TOOLCARD 1:
#x#$n$
#y#$m$
#action#$+/-$
SERVER CHECK RESPONSE

TOOLCARD 2:
#x0#$n0$
#y0#$m0$
#x1#$n1$
#y1#$m1$
SERVER CHECK RESPONSE

TOOLCARD 3:
#x0#$n0$
#y0#$m0$
#x1#$n1$
#y1#$m1$
SERVER CHECK RESPONSE

TOOLCARD 4:
#die#$1$
#x0#$n0$
#y0#$m0$
#x1#$n1$
#y1#$m1$

#die#$2$
#x0#$n0$
#y0#$m0$
#x1#$n1$
#y1#$m1$
SERVER CHECK RESPONSE

TOOLCARD 5:
#round#$r$
#index#$i$
model component draftpool client protocol
SERVER CHECK RESPONSE

TOOLCARD 6:
first check:
model component draftpool client protocol

SERVER CHECK RESPONSE

second check:
model component schemecard client protocol

SERVER CHECK RESPONSE

TOOLCARD 7:
SERVER CHECK RESPONSE

TOOLCARD 8:
SERVER CHECK RESPONSE
client move protocol
until timer

TOOLCARD 9:
client move protocol
SERVER CHECK RESPONSE

TOOLCARD 10:
#x#$n$
#y#$m$
SERVER CHECK RESPONSE



-----------------------------------

TURN PROTOCOL:

to all players:
S: #round#$r$
S: #disconnected#$n$
  if(n!=0)
  #S: #id#$id$
  
S: #active#$id$
S: draftpool model protocol
S: roundtrack model protocol
S: toolcard update

active player:
S: #wait#$todo$
C: #todo#$z$ ---> 0 = pass, 1 = move; 2 = tool
if(todo==1)
  SERVER CHECK RESPONSE
   client move protocol
   SERVER CHECK RESPONSE
if(todo==2)
 SERVER CHECK RESPONSE
 client tool protocol
 
 S: #end#$turn$
 
 
 NOT ACTIVE PLAYERS MOVE NOTIFIER:
 S: #player#$id$
 S: #action#$move$
 S: draftpool model protocol
 S: player schemecard model protocol
 S: #move#$end$
